import { Component } from '@angular/core';
import {Events, IonicPage, NavController} from 'ionic-angular';
import {FolderTypes} from "./folder-types";
import {PartyList} from "../header/party/party-list";
import {UserService} from "../user/user.service";
import {PartyService} from "../header/party/party.service";
import {FolderCounters} from "./folder-counters";

@IonicPage()
@Component({
  selector: 'page-mailbox',
  templateUrl: 'mailbox.page.html'
})
export class MailboxPage {

  private showPartyMenu: boolean = true;

  private partyList: PartyList = null;

  private selectedFolder: string = null; //FolderTypes.INBOX;

  private mailboxCounters: FolderCounters;


  constructor(public events: Events,
              public navCtrl: NavController,
              private userService: UserService,
              private partyService: PartyService) {
    // retrieve the party lookup to be shown in a header - party menu
    this.initParties();
    this.selectedFolder = FolderTypes.INBOX;
    this.mailboxCounters = new FolderCounters(null, null); //TODO TEST ONLY!
  }

  private subscribeToEvents(events: Events) {
    // listening to event 'event.menu.logout'
    events.subscribe('event.menu.logout', ()=> {
    });
  }

  private unsubscribeFromEvents(events: Events) {
    events.unsubscribe('event.menu.logout');
  }

  /**
   * Returns true whenever displayed page is inbox.
   * @returns {boolean}
   */
  public isInboxSelected(): boolean {
    return this.selectedFolder == FolderTypes.INBOX;
  }

  /**
   * Returns true whenever displayed page is sent folder.
   * @returns {boolean}
   */
  public isSentSelected(): boolean {
    return this.selectedFolder == FolderTypes.SENT;
  }


  /**
   * Returns flag when to show party selector menu. Menu is shown in inbox mode only.
   * @returns {boolean}
   */
  public isPartyMenuEnabled(): boolean {
    return this.showPartyMenu;
  }

  public getMailboxCounters(): FolderCounters {
    return this.mailboxCounters;
  }

  public getParties(): PartyList {
    return this.partyList;
  }

  /**
   * Load parties and have them locally during an application's lifetime.
   */
  private initParties() {
    this.userService.getUser().subscribe(
      () => {
        this.partyService.getPartyList().subscribe
        (value => {
          this.partyList = value;
        }, error => {
          console.error("PartyService -> parties not found! " + error);
        });
      }
    );
  }
}
