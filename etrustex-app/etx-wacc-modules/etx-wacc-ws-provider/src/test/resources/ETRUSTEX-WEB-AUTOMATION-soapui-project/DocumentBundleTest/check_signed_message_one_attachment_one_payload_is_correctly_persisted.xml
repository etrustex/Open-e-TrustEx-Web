<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="5aebfffb-4108-4cc2-b787-0997cb46a3d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="check_signed_message_one_attachment_one_payload_is_correctly_persisted" searchProperties="true" disabled="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="5aebfffb-4108-4cc2-b787-0997cb46a3d1fileName">check_signed_message_one_attachment_one_payload_is_correctly_persisted</con:setting></con:settings><con:testStep type="groovy" name="submit_check_signed_message_one_attachment_one_payload_is_correctly_persisted" id="1f9b31b7-aead-45ae-a368-2df58186f08b"><con:settings/><con:config><script><![CDATA[https://webgate.ec.europa.eu/CITnet/jira/browse/ETX-1739	
	import groovy.sql.Sql
	import java.text.SimpleDateFormat
	import com.eviware.soapui.model.mock.MockService
	import com.eviware.soapui.model.mock.MockRunner

	// initialise DB driver
	com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver")

	// load methods from repository
	scripts = testRunner.testCase.testSuite.project.testSuites["SCRIPTS"]
	scripts.testCases["METHODS"].testSteps["METHODS"].run(testRunner, context)

	log.debug "================================================================================"
	log.info "DOCUMENT BUNDLE - START CHECKING SIGNED MESSAGE WITH ONE ATTACHMENT AND ONE PAYLOAD IS CORRECTLY PERSISTED"

	long localPartyId = 1000001
	long businessId = 10000001
	String partyName = "WEB_SENDER_PARTY"
	String businessName = "test"
	String bundleId = "ROBOT_BUNDLE_0003"
	String referenceId = "REFERENCE COM(134)2015"	
	String receiverPartyName = "ROBOT_APP_PARTY"	
	String issueDateTime = "2015-07-01T14:44:39.000"
	String issueDate = "2015-07-01"
	String issueTime = "14:44:39.000"	
	String messageSubject = "THE SUBJECT IS SUBJECTIVE"
	String messageContent = "THE CONTENT IS CONTENTIOUS"	
	String attachmentId = "ATT_1234567_8901234"
	String attachmentFileName = "EDMA_PDF00001.pdf"
	String attachmentFileSize = 41523
	String attachmentChecksum = "D5CE4474F5DE9AE959EC444BE6013E52DD8F314718EA9A06149E22139C4E01A170AC9887925C209E2C85F64FB5218FC55C716FF5481D3D53499B6BBBC0D7C516"
	String metadataId = "MD_890123_4567890"
	String metadataFileName = "payload.xml"
	String metadataFileSize = 1756
	String metadataChecksum = "BF121E052559469A23FCD8E6E047CD65A608F97479CA0E973FB8BFF644885AF68170C48B6E5ACB76775D69730C411AE28CFF60017D51582020FD5A8A9B8DB142"
	String signature = "<![CDATA[<signature>THIS IS A SIGNATURE</signature>]]]]>><![CDATA[" 
	String signedData = "<![CDATA[<signature>THIS IS THE SIGNED DATA</signature>]]]]>><![CDATA["

	// set value to zero - this is used to trigger the mock service to stop
	testRunner.testCase.testSuite.project.setPropertyValue( "MOCK_SERVICE_STOPPER", "0" ) 

	// setup and launch mock service
	def project = testRunner.testCase.getTestSuite().getProject()
	MockService mockService = project.getMockServiceByName( "nodeDocumentWrapperBinding MockService" )
	MockRunner mockRunner = mockService.start()
		
	// open DB connection
	context.commonDao.openDbConnection()
	
	def msgId = null
	
	try{
		
		// create business on business table
		context.commonDao.createBusiness(businessId, businessName)
	
		// create business config on business config table
		context.commonDao.createBusinessConfig(1000001, businessId, "etx.business.receiver.node.party.name", "ROBOT_APP_PARTY")
		context.commonDao.createBusinessConfig(1000002, businessId, "etx.business.warn.email.notif.enabled", "0")
		context.commonDao.createBusinessConfig(1000003, businessId, "etx.business.custom.view.name", "edma")	
		
		// create party on party table
		context.commonDao.createParty(localPartyId, "sysdate", partyName, businessId)

		def newEndpoint = 'http://' + InetAddress.getLocalHost().getCanonicalHostName() + ':' + mockService.getPort() + mockService.getPath()

		// update document wrapper URL to point to the mock service
		context.commonDao.updateDocWrapperURL(newEndpoint)

		// reset cache
		context.commonDao.resetCacheWeb()

		// inject values into inbox notification request
		testRunner.testCase.testSuite.setPropertyValue('BUNDLE_ID', bundleId)
		testRunner.testCase.testSuite.setPropertyValue('REFERENCE_ID', referenceId)
		testRunner.testCase.testSuite.setPropertyValue('ISSUE_DATETIME', issueDateTime)
		testRunner.testCase.testSuite.setPropertyValue('ISSUE_DATE', issueDate)
		testRunner.testCase.testSuite.setPropertyValue('ISSUE_TIME', issueTime)
		testRunner.testCase.testSuite.setPropertyValue('MESSAGE_SUBJECT', messageSubject)
		testRunner.testCase.testSuite.setPropertyValue('MESSAGE_CONTENT', messageContent)	
		testRunner.testCase.testSuite.setPropertyValue('SENDER_PARTY', receiverPartyName)
		testRunner.testCase.testSuite.setPropertyValue('RECEIVER_PARTY', partyName)
		testRunner.testCase.testSuite.setPropertyValue('ATTACHMENT_ID', attachmentId)
		testRunner.testCase.testSuite.setPropertyValue('ATTACHMENT_FILENAME', attachmentFileName)
		testRunner.testCase.testSuite.setPropertyValue('ATTACHMENT_FILESIZE', attachmentFileSize)
		testRunner.testCase.testSuite.setPropertyValue('ATTACHMENT_CHECKSUM', attachmentChecksum)
		testRunner.testCase.testSuite.setPropertyValue('METADATA_ID', metadataId)
		testRunner.testCase.testSuite.setPropertyValue('METADATA_FILENAME', metadataFileName)
		testRunner.testCase.testSuite.setPropertyValue('METADATA_FILESIZE', metadataFileSize)
		testRunner.testCase.testSuite.setPropertyValue('METADATA_CHECKSUM', metadataChecksum)
		testRunner.testCase.testSuite.setPropertyValue('SIGNATURE', signature)
		testRunner.testCase.testSuite.setPropertyValue('SIGNED_DATA', signedData)		

		// define the webservice
		def testCase = testRunner.testCase.testSuite.testCases["webService_DocumentBundleService"]
		def testStep = testCase.testSteps["submitDocumentBundle"]
		
		// EXECUTE SENDING REQUEST TO THE WEBSERVICE
		testStep.run(testRunner, context)

		// define the webservice response
		context.setProperty('xmlResponse', testStep.getProperty('response'))

		// parse the actual response from the webservice
		def submitBundleActualResponse = context.expand( '${xmlResponse#declare namespace soap=\'http://schemas.xmlsoap.org/soap/envelope/\'; //soap:Envelope[1]}' ).replaceAll(/>\s+</, '><')

		// define the expected response from the webservice
		def submitBundleExpectedResponse = """
		<ns4:BusinessHeader>
		  <ns8:Sender>
		     <ns8:Identifier>ROBOT_APP_PARTY</ns8:Identifier>
		  </ns8:Sender>
		  <ns8:Receiver>
		     <ns8:Identifier>WEB_SENDER_PARTY</ns8:Identifier>
		  </ns8:Receiver>
		</ns4:BusinessHeader>
		""".trim().replaceAll(/>\s*</, '><')

		// check that the actual response from the webservice matches the expected response
		assert submitBundleActualResponse.contains(submitBundleExpectedResponse)

		// define waiter that is used to pause the script until the payload has been successfully delivered to the mock service
		def waiter = true

		def oneMinutesInMillies = 1 * 60 * 1000
		def startWaitingTime = System.currentTimeMillis()

		// wait until the payload arrives at the mock service
		while(waiter && ((System.currentTimeMillis() - startWaitingTime) < oneMinutesInMillies)) {
			waiter = (testRunner.testCase.testSuite.project.getPropertyValue("MOCK_SERVICE_STOPPER").equals("0"))
			sleep 1000
		}

		// collect the input data from the request to the mock service
		wsResponseBusinessHeaderSender = testRunner.testCase.testSuite.project.getPropertyValue("MOCK_SERVICE_WS_RESPONSE_BUSINESS_HEADER_SENDER")
		wsResponseSenderParty = testRunner.testCase.testSuite.project.getPropertyValue("MOCK_SERVICE_WS_RESPONSE_SENDERPARTY")		
		wsResponseDocumentId = testRunner.testCase.testSuite.project.getPropertyValue("MOCK_SERVICE_WS_RESPONSE_DOCUMENT_ID")
		wsResponseDocumentTypeCode = testRunner.testCase.testSuite.project.getPropertyValue("MOCK_SERVICE_WS_RESPONSE_DOCUMENT_TYPE_CODE")

		// check that data from the request to the mock service is correct
		assert wsResponseBusinessHeaderSender == partyName
		assert wsResponseSenderParty == receiverPartyName
		assert wsResponseDocumentId == metadataId
		assert wsResponseDocumentTypeCode == "METADATA"		

		// collect the data from the new message persisted on the DB
		msgBundleList = context.commonDao.collectMsgId(bundleId)

		// convert string to date
		Date dateIssueDateTime = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss").parse(issueDateTime)	
		Date dbIssueDateTime = msgBundleList.MSG_ISSUE_DATE[0]
			
		// check message bundle is correctly persisted on the DB
		assert msgBundleList.size() == 1	
		assert msgBundleList.MSG_BUNDLE_ID[0] == bundleId
		assert msgBundleList.MSG_REF_ID[0] == referenceId
		assert dbIssueDateTime == dateIssueDateTime
		assert msgBundleList.MSG_SUBJECT[0] == messageSubject
		assert msgBundleList.MSG_CONTENT[0] == messageContent			
		assert msgBundleList.MSG_REMOTE_PARTY_NAME[0] == receiverPartyName	
		assert msgBundleList.MSG_STATE[0] == "INCOMING"
		assert msgBundleList.MSG_LOCAL_PARTY_ID[0] == localPartyId
		assert msgBundleList.MSG_CREATED_BY[0] == 0
		assert msgBundleList.MSG_UPDATED_BY[0] == null
		assert msgBundleList.MSG_UPDATED_ON[0] == null
		assert msgBundleList.MSG_ACTIVE_STATE[0] == 1
	
		def expectedSignature = "<signature>THIS IS A SIGNATURE</signature>" 
		def expectedSignedData = "<signature>THIS IS THE SIGNED DATA</signature>"

		// convert signed data to a character stream
		signedDataFromDB = msgBundleList.MSG_SIGNED_DATA[0].getCharacterStream().getText()
		assert expectedSignedData == signedDataFromDB

		// convert signature to a character stream
		signatureFromDB = msgBundleList.MSG_SIGNATURE[0].getCharacterStream().getText()
		assert expectedSignature == signatureFromDB		

		// collect the msg_id from the DB to be used to collect attachment and payload data
		msgId = msgBundleList[0].MSG_ID

		// collect the attachment information from the attachment table
		attType = "BINARY"
		attachmentList = context.commonDao.getAttachments(msgId, attType)

		// convert checksum byte array to hex
		inputChecksum = attachmentList.ATT_CHECKSUM[0]
		hexAttachmentChecksum = context.commonDao.byteToHexChecksum(inputChecksum)

		// check that the attachment data is correct on the attachment table
		assert attachmentList.size() == 1
		assert hexAttachmentChecksum == attachmentChecksum
		assert attachmentList.ATT_CHECKSUM_METHOD[0] == "SHA-512"
		assert attachmentList.ATT_MIME_TYPE[0] == null
		assert attachmentList.ATT_FILE_NAME[0] == attachmentFileName
		assert attachmentList.ATT_FILE_SIZE[0] == attachmentFileSize.toInteger()
		assert attachmentList.ATT_WRAPPER_ID[0] == attachmentId	

		// collect the metadata information from the attachment table
		attType = "METADATA"
		attachmentList = context.commonDao.getAttachments(msgId, attType)

		// convert checksum byte array to hex
		inputChecksum = attachmentList.ATT_CHECKSUM[0]
		hexMetadataChecksum = context.commonDao.byteToHexChecksum(inputChecksum)

		// check that the metadata data is correct on the attachment table
		assert attachmentList.size() == 1
		assert hexMetadataChecksum.toUpperCase() == metadataChecksum
		assert attachmentList.ATT_CHECKSUM_METHOD[0] == "SHA-512"
		assert attachmentList.ATT_MIME_TYPE[0] == null
		assert attachmentList.ATT_FILE_NAME[0] == metadataFileName
		assert attachmentList.ATT_FILE_SIZE[0] == metadataFileSize.toInteger()
		assert attachmentList.ATT_WRAPPER_ID[0] == metadataId	

		// collect the metadata information from the metadata table
		metadataList = context.commonDao.getMetadata(msgId)

		// check that the metadata data is correct on the metadata table
		assert metadataList.size() == 1
		assert metadataList.MTD_STATE[0] == "DOWNLOADED"

		// get metadata content from DB
		def mtdContent = metadataList.MTD_CONTENT[0]

		// convert metadata content to a character stream
		metadataPayload = mtdContent.getCharacterStream().getText().trim().replaceAll(/>\s*</, '><')

		// define the expected payload content
		def payloadExpectedContent = """
		<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
		<ETrustExEdmaMd xmlns="urn:eu:europa:ec:comp:etrustex">
		    <subject>Where does the Subject go</subject>
		    <fileNumber>00124364435</fileNumber>
		    <inAttentionOf>Mr Chuck Norris</inAttentionOf>
		    <inboundMetaData>
		        <transferStatus>SENT</transferStatus>
		        <eMail>unknown.email@unknown.com</eMail>
		    </inboundMetaData>
		</ETrustExEdmaMd>
		""".trim().replaceAll(/>\s*</, '><')

		// check that payload on the DB matches the original payload
		assert metadataPayload == payloadExpectedContent

	} finally {

		// revert document wrapper URL back to the node value
		context.commonDao.revertDocWrapperURL()

		if(msgId != null) {
			// delete metadata from metadata table
			context.commonDao.deleteMetadata(msgId)
	
			// delete attachments and metadata from attachment table
			context.commonDao.deleteAttachments(msgId)
		}
		
		// delete message from message table
		context.commonDao.deleteMessage(bundleId)
		
		// delete party from party table
		context.commonDao.deleteParty(partyName)

		// delete business config from business config table
		context.commonDao.deleteBusinessConfig(businessId)
	
		// delete business from business table
		context.commonDao.deleteBusiness(businessId)
	
		// close DB connection
		context.commonDao.closeDbConnection()
		
		// reset cache
		context.commonDao.resetCacheWeb()
		
		// stop mock service	
		mockRunner.stop()
		
	}

	log.info "DOCUMENT BUNDLE - FINISHED CHECKING SIGNED MESSAGE WITH ONE ATTACHMENT AND ONE PAYLOAD IS CORRECTLY PERSISTED"
]]></script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase>