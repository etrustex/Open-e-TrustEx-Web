<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="5e746daa-bf51-4601-a350-a0da8679ae49" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="check_party_is_available_as_user_role_and_user_are_set_to_inactive" searchProperties="true" disabled="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="583ec887-eefe-48a6-b604-47287b67e9bdfileName">check_standard_incoming_message_is_correctly_persisted</con:setting><con:setting id="51a63d03-2822-40b6-9f58-eb6899d5dbf0fileName">check_signed_message_one_attachment_one_payload_is_correctly_persisted</con:setting><con:setting id="2c021a08-9d90-4ccd-9403-82b8176e7994fileName">check_READ_messageStatus_is_correctly_persisted</con:setting><con:setting id="4bdd89ac-d9d1-48e2-9d45-dbd301f205a5fileName">check_assign_a_party_to_one_user</con:setting><con:setting id="7bdc3f72-ae10-4851-848d-5a79c0fda2f4fileName">check_party_already_assigned_user</con:setting><con:setting id="9c688f93-d0d3-4fe0-982d-c15679aa798bfileName">check_party_is_available_as_web_user_role_set_to_inactive</con:setting><con:setting id="5e746daa-bf51-4601-a350-a0da8679ae49fileName">check_party_is_available_as_user_role_and_user_are_set_to_inactive</con:setting></con:settings><con:testStep type="groovy" name="submit_check_party_is_available_as_user_role_and_user_are_set_to_inactive" id="2962b351-02c5-4713-b20f-580eb7c7b702"><con:settings/><con:config><script>	
	import groovy.sql.Sql
	import java.text.SimpleDateFormat

	// initialise DB driver
	com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver")

	// load methods from repository
	scripts = testRunner.testCase.testSuite.project.testSuites["SCRIPTS"]
	scripts.testCases["METHODS"].testSteps["METHODS"].run(testRunner, context)

	log.debug "================================================================================"
	log.info "USER REGISTRATION - ASSIGN USER - START CHECKING PARTY NOT AVAILABLE"

	long businessId = 1000001
	long partyId = 1000002
	long businessUserConfigId = 1000003
	long userId = 1000004
	long userRoleId = 1000005
	String receiverPartyName = "ROBOT_APP_PARTY"	
	String businessName = "TEST"
	String application = "TEST"
	String partyName = "WEB_SENDER_PARTY1"
	String userLogin = "cholaarX"
	String firstName = "Armen"
	String lastName = "Cholakian"
	String userEmail = "armo@chocko.com"
	
	// open DB connection
	context.commonDao.openDbConnection()
	
	try{
	
		// create business on business table
		context.commonDao.createBusiness(businessId, businessName)
	
		// create business config on business config table
		context.commonDao.createBusinessConfig(1000001, businessId, "etx.business.receiver.node.party.name", "ROBOT_APP_PARTY")
		context.commonDao.createBusinessConfig(1000002, businessId, "etx.business.warn.email.notif.enabled", "0")
		context.commonDao.createBusinessConfig(1000003, businessId, "etx.business.custom.view.name", "edma")	
		
		// create party on party table
		context.commonDao.createParty(partyId, "sysdate", partyName, businessId)

		// create user on user table - set active state to zero to deactivate the user
		context.commonDao.createUser(userId, userLogin, "${lastName} ${firstName}", "0")

		// create business user config on business user config table
		context.commonDao.createBusinessUserConfig(businessUserConfigId, userId, businessId, "${lastName} ${firstName}",userEmail)		

		// create web user role on web user role table - set active state to zero to deactivate the user role
		context.commonDao.createUserRole(userRoleId, userId, partyId, "0")

		// reset cache
		context.commonDao.resetCacheWeb()

		// inject values into second assign user request
		testRunner.testCase.testSuite.setPropertyValue('USER_LOGIN', userLogin)
		testRunner.testCase.testSuite.setPropertyValue('PARTY_ID', partyName)
		testRunner.testCase.testSuite.setPropertyValue('APPLICATION', application)
		testRunner.testCase.testSuite.setPropertyValue('FIRST_NAME', firstName)
		testRunner.testCase.testSuite.setPropertyValue('LAST_NAME', lastName)
		testRunner.testCase.testSuite.setPropertyValue('USER_EMAIL', userEmail)

		// define the webservice - assign user
		def testCase = testRunner.testCase.testSuite.testCases["webService_UserRegistrationService"]
		def testStep = testCase.testSteps["assignUserParty"]

		// EXECUTE SENDING REQUEST TO THE ASSIGN USER WEBSERVICE AGAIN FOR THE SAME PARTY TO TRIGGER A PARTY NOT AVAILABLE RESPONSE
		testStep.run(testRunner, context)

		// define the webservice response for assign user
		context.setProperty('xmlResponse', testStep.getProperty('response'))
	
		// parse the actual response from the webservice
		assignUserActualResponse = context.expand( '${xmlResponse#declare namespace ns1=\'http://ec.europa.eu/etrustex/webapp/service/admin/userregistration/v1.0\'; //ns1:assignUserPartyResp[1]/ns1:status[1]}' )

		// check that the actual response from the webservice matches the expected response
		assert assignUserActualResponse == "SUCCESS"

		log.error "ETX-1757 THIS SCRIPT WILL FAIL AS THERE IS A BUG IN THE APPLICATION !!"
	
	} finally {

		// delete user roles from the web user role table
		context.commonDao.deleteUserRole(partyId)

		// delete users from the business user config table
		context.commonDao.deleteBusinessUserConfig(businessId)

		// delete users from the web user table
		context.commonDao.deleteUser(userLogin)

		// delete parties from party table
		context.commonDao.deleteParty(partyName)

		// delete business config from business config table
		context.commonDao.deleteBusinessConfig(businessId)
	
		// delete business from business table
		context.commonDao.deleteBusiness(businessId)

		// close DB connection
		context.commonDao.closeDbConnection()

		// reset cache
		context.commonDao.resetCacheWeb()
	
	}

	log.info "USER REGISTRATION - ASSIGN USER - FINISHED CHECKING PARTY NOT AVAILABLE"
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase>