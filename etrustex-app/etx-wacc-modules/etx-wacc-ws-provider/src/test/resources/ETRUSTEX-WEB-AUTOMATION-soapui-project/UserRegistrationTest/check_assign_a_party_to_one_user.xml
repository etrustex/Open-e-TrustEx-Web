<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="4bdd89ac-d9d1-48e2-9d45-dbd301f205a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="check_assign_five_parties_to_five_users" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="583ec887-eefe-48a6-b604-47287b67e9bdfileName">check_standard_incoming_message_is_correctly_persisted</con:setting><con:setting id="51a63d03-2822-40b6-9f58-eb6899d5dbf0fileName">check_signed_message_one_attachment_one_payload_is_correctly_persisted</con:setting><con:setting id="2c021a08-9d90-4ccd-9403-82b8176e7994fileName">check_READ_messageStatus_is_correctly_persisted</con:setting><con:setting id="4bdd89ac-d9d1-48e2-9d45-dbd301f205a5fileName">check_assign_a_party_to_one_user</con:setting></con:settings><con:testStep type="groovy" name="submit_check_assign_five_parties_to_five_users" id="59f847ef-70db-43e5-b840-f9ba1b4f1699"><con:settings/><con:config><script>	
	import groovy.sql.Sql
	import java.text.SimpleDateFormat

	// initialise DB driver
	com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver")

	// load methods from repository
	scripts = testRunner.testCase.testSuite.project.testSuites["SCRIPTS"]
	scripts.testCases["METHODS"].testSteps["METHODS"].run(testRunner, context)

	log.debug "================================================================================"
	log.info "USER REGISTRATION - ASSIGN USER - START CHECKING ASSIGN THREE USERS TO FIVE PARTIES AND CHECK REMAINING TWO PARTIES"

	long businessId = 10000001	
	String receiverPartyName = "ROBOT_APP_PARTY"	
	String businessName = "TEST"
	String application = "TEST"

	def partyIdList = [1000001, 1000002, 1000003, 1000004, 1000005]
	def partyList = ["WEB_SENDER_PARTY1", "WEB_SENDER_PARTY2", "WEB_SENDER_PARTY3", "WEB_SENDER_PARTY4", "WEB_SENDER_PARTY5"]
	def userLoginList = ["cholaarX", "miclevaX", "toulyolX", "bertogdX", "ionesrnX"]
	def firstNameList = ["Armen", "Valer", "Geraud", "Olivier", "Razvan"]
	def lastNameList = ["Cholakian", "Micle", "Berton", "Touly", "Ionescu"]
	def userEmailList = ["armo@chocko.com", "valer@micle.com", "geraud@frogland.com", "olivier@frogland.com", "razvan@ionescu.com"]	
	
	// open DB connection
	context.commonDao.openDbConnection()
	
	try{
		
		// create business on business table
		context.commonDao.createBusiness(businessId, businessName)
	
		// create business config on business config table
		context.commonDao.createBusinessConfig(1000001, businessId, "etx.business.receiver.node.party.name", "ROBOT_APP_PARTY")
		context.commonDao.createBusinessConfig(1000002, businessId, "etx.business.warn.email.notif.enabled", "0")
		context.commonDao.createBusinessConfig(1000003, businessId, "etx.business.custom.view.name", "edma")	
		
		// create parties on party table
		context.commonDao.createParty(partyIdList[0], "sysdate", partyList[0], businessId)
		context.commonDao.createParty(partyIdList[1], "sysdate", partyList[1], businessId)
		context.commonDao.createParty(partyIdList[2], "sysdate", partyList[2], businessId)
		context.commonDao.createParty(partyIdList[3], "sysdate", partyList[3], businessId)
		context.commonDao.createParty(partyIdList[4], "sysdate", partyList[4], businessId)
	
		// reset cache
		context.commonDao.resetCacheWeb()

		// create a loop to submit and check four user assignments - leaving one remaining as available
		for(x = 0; x &lt; (3); x++){

			// inject values into assign user request
			testRunner.testCase.testSuite.setPropertyValue('USER_LOGIN', userLoginList[x])
			testRunner.testCase.testSuite.setPropertyValue('PARTY_ID', partyList[x])
			testRunner.testCase.testSuite.setPropertyValue('APPLICATION', application)
			testRunner.testCase.testSuite.setPropertyValue('FIRST_NAME', firstNameList[x])
			testRunner.testCase.testSuite.setPropertyValue('LAST_NAME', lastNameList[x])
			testRunner.testCase.testSuite.setPropertyValue('USER_EMAIL', userEmailList[x])

			// define the webservice - assign user
			def testCase = testRunner.testCase.testSuite.testCases["webService_UserRegistrationService"]
			def testStep = testCase.testSteps["assignUserParty"]

			// EXECUTE SENDING REQUEST TO THE ASSIGN USER WEBSERVICE
			testStep.run(testRunner, context)

			// define the webservice response for assign user
			context.setProperty('xmlResponse', testStep.getProperty('response'))
		
			// parse the response code from the webservice response
			def assignUserActualResponse = context.expand( '${xmlResponse#declare namespace ns1=\'http://ec.europa.eu/etrustex/webapp/service/admin/userregistration/v1.0\'; //ns1:assignUserPartyResp[1]/ns1:status[1]}' )

			// check that the response code from the webservice is "success"
			assert assignUserActualResponse == "SUCCESS"	

		// end loop
		}
		
		// collect user values from the business user config table
		businessUserConfigList = context.commonDao.getBusinessUserConfig(businessId)

		// create a loop to check all users data
		for(x = 0; x &lt; (3); x++){

			// check that the expected values match those on the DB
			assert businessUserConfigList[x].BUC_NAME == lastNameList[x] + " " + firstNameList[x]
			assert businessUserConfigList[x].BUC_EMAIL == userEmailList[x]
			assert businessUserConfigList[x].BUC_NOTIFICATIONS_ENABLED == 1
			assert businessUserConfigList[x].BUC_CREATED_BY == 0
			assert businessUserConfigList[x].BUC_ACTIVE_STATE == 1
			
			// collect user values from the web user table
			webUser = context.commonDao.getWebUser(businessUserConfigList[x].USR_ID)

			// check that the expected values match those on the DB
			assert webUser.USR_LOGIN[0] == userLoginList[x]
			assert webUser.USR_NAME[0] == lastNameList[x] + " " + firstNameList[x]
			assert webUser.USR_CREATED_BY[0] == 0
			assert webUser.USR_ACTIVE_STATE[0] == 1

			// collect user values from the web user role table
			webUserRole = context.commonDao.getWebUserRole(partyIdList[x])

			// check that the expected values match those on the DB
			assert webUserRole.USR_ID[0] == businessUserConfigList[x].USR_ID
			assert webUserRole.ROL_TYPE[0] == "PARTY_ADMIN"
			assert webUserRole.BUS_ID[0] == null
			assert webUserRole.URO_CREATED_BY[0] == 0
			assert webUserRole.URO_ACTIVE_STATE[0] == 1

		// end loop	
		}

		// define the webservice - list available parties
		def testCase2 = testRunner.testCase.testSuite.testCases["webService_UserRegistrationService"]
		def testStep2 = testCase2.testSteps["listAvailableParties"]
		
		// EXECUTE SENDING REQUEST TO THE LIST OF AVAILABLE PARTIES WEBSERVICE
		testStep2.run(testRunner, context)

		// define the webservice response for list of available parties
		context.setProperty('xmlResponse2', testStep2.getProperty('response'))

		// check that four parties are returned by the webservice
		def numberOfParties = context.expand( '${xmlResponse2#count(//ns1:partyID)}' ).toInteger()
		assert numberOfParties == 2

		// define a list to collect the party names from the webservice response=
		def availablePartyList = [] as Set

		// create a loop to collect parties from the webservice response
		for(x = 0; x &lt; (2); x++){

			def partyResult = context.expand( '${xmlResponse2#declare namespace ns1=\'http://ec.europa.eu/etrustex/webapp/service/admin/userregistration/v1.0\'; //ns1:listAvailablePartiesResp[1]//ns1:listAvailableParties['+(x+1)+']/ns1:partyID[1]}' )

			availablePartyList.add(partyResult)	
	
		}

		// check that each defined party is available in the set
		for(i = 0; i &lt; availablePartyList.size(); i++) {
			
     		assert partyList.indexOf(availablePartyList[i]) >= 0

		}

	} finally {

		// delete user roles from the web user role table
		context.commonDao.deleteUserRole(partyIdList[0])
		context.commonDao.deleteUserRole(partyIdList[1])
		context.commonDao.deleteUserRole(partyIdList[2])
		context.commonDao.deleteUserRole(partyIdList[3])
		context.commonDao.deleteUserRole(partyIdList[4])

		// delete users from the business user config table
		context.commonDao.deleteBusinessUserConfig(businessId)

		// delete users from the web user table
		context.commonDao.deleteUser(userLoginList[0])
		context.commonDao.deleteUser(userLoginList[1])
		context.commonDao.deleteUser(userLoginList[2])
		context.commonDao.deleteUser(userLoginList[3])
		context.commonDao.deleteUser(userLoginList[4])
	
		// delete parties from party table
		context.commonDao.deleteParty(partyList[0])
		context.commonDao.deleteParty(partyList[1])
		context.commonDao.deleteParty(partyList[2])		
		context.commonDao.deleteParty(partyList[3])
		context.commonDao.deleteParty(partyList[4])
		
		// delete business config from business config table
		context.commonDao.deleteBusinessConfig(businessId)
	
		// delete business from business table
		context.commonDao.deleteBusiness(businessId)

		// close DB connection
		context.commonDao.closeDbConnection()

		// reset cache
		context.commonDao.resetCacheWeb()
				
	}

	log.info "USER REGISTRATION - ASSIGN USER - FINISHED CHECKING ASSIGN THREE USERS TO FIVE PARTIES AND CHECK REMAINING TWO PARTIES"
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase>