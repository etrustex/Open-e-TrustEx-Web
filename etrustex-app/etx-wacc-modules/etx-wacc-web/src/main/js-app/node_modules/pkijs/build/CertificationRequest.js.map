{"version":3,"sources":["../src/CertificationRequest.js"],"names":["asn1js","CertificationRequestInfo","parameters","names","Sequence","name","value","Integer","CertificationRequestInfoVersion","schema","subject","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificationRequestInfoAttributes","attributes","CertificationRequest","tbs","defaultValues","version","subjectPublicKeyInfo","signatureAlgorithm","signatureValue","fromSchema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","outputArray","toSchema","push","encodeFlag","tbsSchema","length","fromBER","encodeTBS","object","byteLength","toJSON","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","signature","crypto","shaAlgorithm","algorithmId","algorithm","algorithmObject","algorithmName","hash","algorithmParamsChecked","algorithmParams","curveObject","toString","namedCurve","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","Uint8Array","importKey","usages","publicKey","pssParameters","ex","saltLength","hashAlgo","verify","memberName","ArrayBuffer","certificationRequestInfo","ObjectIdentifier","Any"],"mappings":"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","file":"CertificationRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport { getAlgorithmParameters, getCrypto, getEngine, getHashAlgorithm, getAlgorithmByOID, createECDSASignatureFromCMS } from \"./common\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Attribute from \"./Attribute\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificationRequest ::= SEQUENCE {\r\n\t\t//    certificationRequestInfo CertificationRequestInfo,\r\n\t\t//    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t\t//    signature                BIT STRING\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS10\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst subjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\tconst signature = this.signatureValue;\r\n\t\tconst tbs = this.tbs;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a correct hashing algorithm\r\n\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Importing public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(this.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = this.signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = this.subjectPublicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\t\t\t\r\n\t\t\tconst algorithmName = algorithmObject.name;\r\n\t\t\t\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmName, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in subjectPublicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in subjectPublicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = getAlgorithmByOID(subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\t\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(tbs));\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct algorithm for imported public key\r\n\t\tif(parameters === null)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tparameters = {};\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find signer's hashing algorithm\r\n\t\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(this.subjectPublicKeyInfo.algorithm.algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${this.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in this.subjectPublicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in this.subjectPublicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((this.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (this.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = getAlgorithmByOID(this.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${this.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get neccessary values from internal fields for current certificate\r\n\t\tconst publicKeyInfoSchema = this.subjectPublicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}