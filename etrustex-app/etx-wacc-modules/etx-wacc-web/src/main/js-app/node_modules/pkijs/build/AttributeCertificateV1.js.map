{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["asn1js","AttCertValidityPeriod","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","toDate","Sequence","value","GeneralizedTime","valueDate","memberName","Date","name","blockName","ObjectDigestInfo","digestedObjectType","otherObjectTypeID","digestAlgorithm","objectDigest","push","toSchema","toJSON","Enumerated","ObjectIdentifier","BitString","optional","IssuerSerial","issuer","serialNumber","issuerUID","valueBlock","Integer","V2Form","issuerName","baseCertificateID","objectDigestInfo","idBlock","tagClass","tagNumber","Constructed","Holder","entityName","AttributeCertificateInfo","version","holder","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","Array","from","element","Choice","Repeated","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV1.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Attribute from \"./Attribute\";\r\nimport Extensions from \"./Extensions\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttCertValidityPeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttCertValidityPeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @description notBeforeTime\r\n\t\t */\r\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @description notAfterTime\r\n\t\t */\r\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBeforeTime\":\r\n\t\t\tcase \"notAfterTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // AttCertValidityPeriod  ::= SEQUENCE {\r\n        //   notBeforeTime  GeneralizedTime,\r\n        //   notAfterTime   GeneralizedTime\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBeforeTime]\r\n\t\t * @property {string} [notAfterTime]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttCertValidityPeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\r\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnotBeforeTime: this.notBeforeTime,\r\n\t\t\tnotAfterTime: this.notAfterTime\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class ObjectDigestInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ObjectDigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @description digestedObjectType\r\n\t\t */\r\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectIdentifier}\r\n\t\t\t * @description otherObjectTypeID\r\n\t\t\t */\r\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\r\n\t\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description objectDigest\r\n\t\t */\r\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestedObjectType\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"otherObjectTypeID\":\r\n\t\t\t\treturn new asn1js.ObjectIdentifier();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"objectDigest\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // ObjectDigestInfo ::= SEQUENCE {\r\n        //   digestedObjectType  ENUMERATED {\r\n        //     publicKey            (0),\r\n        //     publicKeyCert        (1),\r\n        //     otherObjectTypes     (2) },\r\n        //   -- otherObjectTypes MUST NOT\r\n        //   -- be used in this profile\r\n        //   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\r\n        //   digestAlgorithm     AlgorithmIdentifier,\r\n        //   objectDigest        BIT STRING\r\n        // }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [digestedObjectType]\r\n\t\t * @property {string} [otherObjectTypeID]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [objectDigest]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tObjectDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\r\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tobjectDigest: \"objectDigest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in asn1.result)\r\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\r\n\t\t\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.objectDigest = asn1.result.objectDigest;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [this.digestedObjectType]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.value.push(this.otherObjectTypeID);\r\n\t\t\r\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\r\n\t\tresult.value.push(this.objectDigest);\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON()\r\n\r\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\t\tresult.objectDigest = this.objectDigest.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t\r\n\t\tif(\"issuerUID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUID\r\n\t\t\t */\r\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"issuerUID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// \tIssuerSerial  ::=  SEQUENCE {\r\n\t\t//   \tissuer         GeneralNames,\r\n\t\t// \t\tserial         CertificateSerialNumber,\r\n\t\t// \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n\t\t// }\r\n\t\t//\r\n\t\t// CertificateSerialNumber ::= INTEGER\r\n\t\t// UniqueIdentifier  ::=  BIT STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [issuerUID]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUID || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tissuerUID: \"issuerUID\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t\r\n\t\tif(\"issuerUID\" in asn1.result)\r\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t})\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.issuerUID = this.issuerUID.toJSON()\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class V2Form\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for V2Form class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"issuerName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description issuerName\r\n\t\t\t */\r\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuerName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // V2Form ::= SEQUENCE {\r\n        //   issuerName            GeneralNames  OPTIONAL,\r\n        //   baseCertificateID     [0] IssuerSerial  OPTIONAL,\r\n        //   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\r\n        //     -- issuerName MUST be present in this profile\r\n        //     -- baseCertificateID and objectDigestInfo MUST NOT\r\n        //     -- be present in this profile\r\n        // }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: names.issuerName\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tV2Form.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuerName: \"issuerName\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"issuerName\" in asn1.result)\r\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({ schema: asn1.result.baseCertificateID });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({ schema: asn1.result.objectDigestInfo });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.issuerName = this.issuerName.toJSON();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class Holder\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Holder class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\r\n\t\t\t\r\n\t\tif(\"entityName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description entityName\r\n\t\t\t */\r\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\r\n\t\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"entityName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // Holder ::= SEQUENCE {\r\n        //   baseCertificateID   [0] IssuerSerial OPTIONAL,\r\n        //       -- the issuer and serial number of\r\n        //       -- the holder's Public Key Certificate\r\n        //   entityName          [1] GeneralNames OPTIONAL,\r\n        //       -- the name of the claimant or role\r\n        //   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\r\n        //       -- used to directly authenticate the holder,\r\n        //       -- for example, an executable\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [entityName]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.entityName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tHolder.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tentityName: \"entityName\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({ schema: asn1.result.baseCertificateID });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.entityName.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.entityName.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.entityName = new GeneralNames({ schema: asn1.result.entityName });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({ schema: asn1.result.objectDigestInfo });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t\tresult.entityName = this.entityName.toJSON();\r\n\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Holder}\r\n\t\t * @description holder\r\n\t\t */\r\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfo.defaultValues(\"holder\"));\r\n\t\t/**\r\n\t\t * @type {GeneralNames|V2Form}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfo.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfo.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @description attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfo.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfo.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfo.defaultValues(\"issuerUniqueID\"));\r\n\t\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"holder\":\r\n\t\t\t\treturn new Holder();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // AttributeCertificateInfo ::= SEQUENCE {\r\n        //   version                 AttCertVersion, -- version is v2\r\n        //   holder                  Holder,\r\n        //   issuer                  AttCertIssuer,\r\n        //   signature               AlgorithmIdentifier,\r\n        //   serialNumber            CertificateSerialNumber,\r\n        //   attrCertValidityPeriod  AttCertValidityPeriod,\r\n        //   attributes              SEQUENCE OF Attribute,\r\n        //   issuerUniqueID          UniqueIdentifier OPTIONAL,\r\n        //   extensions              Extensions OPTIONAL\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tHolder.schema(names.holder || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tholder: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"holder\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\r\n\t\t\r\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\r\n\t\t{\r\n\t\t\tcase 3: // V2Form\r\n\t\t\t\t//region Change type to \"Sequence\"\r\n\t\t\t\tasn1.result.issuer.idBlock.tagClass = 1;\r\n\t\t\t\tasn1.result.issuer.idBlock.tagNumber = 16;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tthis.issuer = new V2Form({ schema: asn1.result.issuer });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: // GeneralNames (should not be used)\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfo\");\r\n\t\t}\r\n\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.holder.toSchema(),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tthis.signature.toSchema(),\r\n\t\t\t\tthis.serialNumber,\r\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version,\r\n\t\t\tholder: this.holder.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport default class AttributeCertificateV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfo}\r\n\t\t * @description acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfo();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // AttributeCertificate ::= SEQUENCE {\r\n        //   acinfo               AttributeCertificateInfo,\r\n        //   signatureAlgorithm   AlgorithmIdentifier,\r\n        //   signatureValue       BIT STRING\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfo.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfo({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}