{"version":3,"sources":["../src/CertificateSet.js"],"names":["asn1js","CertificateSet","parameters","certificates","defaultValues","fromSchema","schema","asn1","compareSchema","verified","Error","Array","from","result","element","idBlock","tagClass","Set","value","toSchema","toJSON","memberName","names","name","blockName","Repeated","Choice","Constructed","tagNumber","Any","ObjectIdentifier"],"mappings":"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","file":"CertificateSet.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Certificate from \"./Certificate\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateSet ::= SET OF CertificateChoices\r\n\t\t//\r\n\t\t//CertificateChoices ::= CHOICE {\r\n\t\t//    certificate Certificate,\r\n\t\t//    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t\t//    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t\t//    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t\t//    other [3] IMPLICIT OtherCertificateFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t); // TODO: add definition for \"AttributeCertificateV2\"\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_CERTIFICATE_SET\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element =>\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tif(element instanceof Certificate)\r\n\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}