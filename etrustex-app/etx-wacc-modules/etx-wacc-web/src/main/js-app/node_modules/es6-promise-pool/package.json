{
  "_args": [
    [
      {
        "raw": "es6-promise-pool",
        "scope": null,
        "escapedName": "es6-promise-pool",
        "name": "es6-promise-pool",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Pgm\\workspaces\\etx-web\\etrustex-app\\etx-wacc-modules\\etx-wacc-web\\src\\main\\webapp"
    ]
  ],
  "_from": "es6-promise-pool@latest",
  "_id": "es6-promise-pool@2.5.0",
  "_inCache": true,
  "_location": "/es6-promise-pool",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/es6-promise-pool-2.5.0.tgz_1503132374260_0.9502894012257457"
  },
  "_npmUser": {
    "name": "timdp",
    "email": "hi@tmdpw.eu"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "es6-promise-pool",
    "scope": null,
    "escapedName": "es6-promise-pool",
    "name": "es6-promise-pool",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://diplazium.cc.cec.eu.int:8081/repository/npm-all/es6-promise-pool/-/es6-promise-pool-2.5.0.tgz",
  "_shasum": "147c612b36b47f105027f9d2bf54a598a99d9ccb",
  "_shrinkwrap": null,
  "_spec": "es6-promise-pool",
  "_where": "C:\\Pgm\\workspaces\\etx-web\\etrustex-app\\etx-wacc-modules\\etx-wacc-web\\src\\main\\webapp",
  "author": {
    "name": "Tim De Pauw",
    "url": "https://tmdpw.eu"
  },
  "bugs": {
    "url": "https://github.com/timdp/es6-promise-pool/issues"
  },
  "dependencies": {},
  "description": "Runs Promises in a pool that limits their concurrency.",
  "devDependencies": {
    "bluebird": "^3.5.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "console-stamp": "^0.2.5",
    "coveralls": "^2.13.0",
    "dirty-chai": "^1.2.2",
    "es6-promise": "^4.1.0",
    "karma": "^1.6.0",
    "karma-chai": "^0.1.0",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-spec-reporter": "0.0.31",
    "mocha": "^3.2.0",
    "mocha-junit-reporter": "^1.13.0",
    "mocha-lcov-reporter": "^1.3.0",
    "nyc": "^10.2.0",
    "standard": "^10.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "147c612b36b47f105027f9d2bf54a598a99d9ccb",
    "tarball": "http://diplazium.cc.cec.eu.int:8081/repository/npm-all/es6-promise-pool/-/es6-promise-pool-2.5.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "es6-promise-pool.js",
    "es6-promise-pool.d.ts"
  ],
  "gitHead": "ea4efc68c0b9726294151af2feba948a39782fab",
  "homepage": "https://github.com/timdp/es6-promise-pool#readme",
  "keywords": [
    "promise",
    "promises",
    "promises-a",
    "promises-aplus",
    "future",
    "futures",
    "deferred",
    "deferreds",
    "generator",
    "generators",
    "async",
    "await",
    "flow control",
    "pool",
    "queue",
    "throttle",
    "es6",
    "browser",
    "node"
  ],
  "license": "MIT",
  "main": "es6-promise-pool.js",
  "maintainers": [
    {
      "name": "timdp",
      "email": "hi@tmdpw.eu"
    }
  ],
  "name": "es6-promise-pool",
  "optionalDependencies": {},
  "readme": "# ES6 Promise Pool\n\n[![npm](https://img.shields.io/npm/v/es6-promise-pool.svg)](https://www.npmjs.com/package/es6-promise-pool) ![Bower](https://img.shields.io/bower/v/es6-promise-pool.svg) [![CircleCI Build](https://img.shields.io/circleci/project/github/timdp/es6-promise-pool/master.svg?label=circleci+build)](https://circleci.com/gh/timdp/es6-promise-pool) [![AppVeyor Build](https://img.shields.io/appveyor/ci/timdp/es6-promise-pool/master.svg?label=appveyor+build)](https://ci.appveyor.com/project/timdp/es6-promise-pool) [![Coverage Status](https://img.shields.io/coveralls/timdp/es6-promise-pool/master.svg)](https://coveralls.io/r/timdp/es6-promise-pool) [![JavaScript Standard Style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\nRuns `Promise`s in a pool that limits their concurrency.\n\n## Motivation\n\nAn ECMAScript 2015 `Promise` is a great way to handle asynchronous operations.\nThe `Promise.all` function provides an easy interface to let a bunch of promises\nsettle concurrently.\n\nHowever, it's an all-or-nothing approach: all your promises get created\nsimultaneously. If you have a ton of operations that you want to run with _some_\nconcurrency, `Promise.all` is no good.\n\nInstead, you probably want to limit the maximum number of simultaneous\noperations. That's where this module comes in. It provides an easy way of\nwaiting for any number of promises to settle, while imposing an upper bound on\nthe number of simultaneously executing promises.\n\nThe promises can be created in a just-in-time fashion. You essentially pass a\nfunction that produces a new promise every time it is called. Alternatively, you\ncan pass an ES2015 iterator, meaning you can also use generator functions.\n\n## Compatibility\n\nThis module can be used both under **Node.js** and on the **Web**. If your\nplatform does not have a native `Promise` implementation, you can use a polyfill\nsuch as [ES6-Promise](https://github.com/jakearchibald/es6-promise).\n\n## Installation\n\n```bash\nnpm install --save es6-promise-pool\n```\n\n```bash\nbower install --save es6-promise-pool\n```\n\n```html\n<script src=\"es6-promise-pool.js\"></script>\n```\n\n## Usage\n\n```js\n// On the Web, leave out this line and use the script tag above instead.\nvar PromisePool = require('es6-promise-pool')\n\nvar promiseProducer = function () {\n  // Your code goes here.\n  // If there is work left to be done, return the next work item as a promise.\n  // Otherwise, return null to indicate that all promises have been created.\n  // Scroll down for an example.\n}\n\n// The number of promises to process simultaneously.\nvar concurrency = 3\n\n// Create a pool.\nvar pool = new PromisePool(promiseProducer, concurrency)\n\n// Start the pool.\nvar poolPromise = pool.start()\n\n// Wait for the pool to settle.\npoolPromise.then(function () {\n  console.log('All promises fulfilled')\n}, function (error) {\n  console.log('Some promise rejected: ' + error.message)\n})\n```\n\n## Producers\n\nThe `PromisePool` constructor takes a `Promise`-producing function as its first\nargument. Let's first assume that we have this helper function that returns a\npromise for the given `value` after `time` milliseconds:\n\n```js\nvar delayValue = function (value, time) {\n  return new Promise(function (resolve, reject) {\n    console.log('Resolving ' + value + ' in ' + time + ' ms')\n    setTimeout(function () {\n      console.log('Resolving: ' + value)\n      resolve(value)\n    }, time)\n  })\n}\n```\n\n### Function\n\nNow, let's use the helper function above to create five such promises, which\nare each fulfilled after a second. Because of the `concurrency` of `3`, the\nfirst three promises will be fulfilled after one second. Then, the remaining two\nwill be processed and fulfilled after another second.\n\n```js\nvar count = 0\nvar promiseProducer = function () {\n  if (count < 5) {\n    count++\n    return delayValue(count, 1000)\n  } else {\n    return null\n  }\n}\n\nvar pool = new PromisePool(promiseProducer, 3)\n\npool.start()\n  .then(function () {\n    console.log('Complete')\n  })\n```\n\n### Iterator\n\nWe can achieve the same result with ECMAScript 2015 iterators. Since ES2015\ngenerator functions return such an iterator, we can make the example above a lot\nprettier:\n\n```js\nconst generatePromises = function * () {\n  for (let count = 1; count <= 5; count++) {\n    yield delayValue(count, 1000)\n  }\n}\n\nconst promiseIterator = generatePromises()\nconst pool = new PromisePool(promiseIterator, 3)\n\npool.start()\n  .then(() => console.log('Complete'))\n```\n\nIt's also possible to pass a generator function directly. In that case, it will\nbe invoked with no arguments and the resulting iterator will be used. This\nfeature will however be removed in version 3.\n\n## Events\n\nWe can also ask the promise pool to notify us when an individual promise is\nfulfilled or rejected. The pool fires `fulfilled` and `rejected` events exactly\nfor this purpose.\n\n```js\nvar pool = new PromisePool(promiseProducer, concurrency)\n\npool.addEventListener('fulfilled', function (event) {\n  // The event contains:\n  // - target:    the PromisePool itself\n  // - data:\n  //   - promise: the Promise that got fulfilled\n  //   - result:  the result of that Promise\n  console.log('Fulfilled: ' + event.data.result)\n})\n\npool.addEventListener('rejected', function (event) {\n  // The event contains:\n  // - target:    the PromisePool itself\n  // - data:\n  //   - promise: the Promise that got rejected\n  //   - error:   the Error for the rejection\n  console.log('Rejected: ' + event.data.error.message)\n})\n\npool.start()\n  .then(function () {\n    console.log('Complete')\n  })\n```\n\n## Upgrading\n\nSince version 2.0.0, this module does not depend on\n[ES6-Promise](https://github.com/jakearchibald/es6-promise) anymore. If you\nwant to support platforms without a native `Promise` implementation, please\nload a polyfill first.\n\nIf you prefer not to polyfill the global `Promise` for whatever reason, you can\nalso pass your `Promise` class as an option instead:\n\n```js\nvar ES6Promise = require('es6-promise').Promise // or another implementation\nvar pool = new PromisePool(promiseProducer, concurrency, {promise: ES6Promise})\n```\n\n## Alternatives\n\n- Vilic Vane's [Promise Pool](https://github.com/vilic/promise-pool) offers a\n  similar API.\n- [Bluebird](https://github.com/petkaantonov/bluebird) includes\n  [`Promise.map()`](http://bluebirdjs.com/docs/api/promise.map.html),\n  which takes a `concurrency` option.\n- Similarly, [λ (a.k.a. contra)](https://github.com/bevacqua/contra) has\n  [`λ.concurrent()`](https://github.com/bevacqua/contra#λconcurrenttasks-cap-done)\n  with the optional `cap` parameter.\n- With [Q](https://github.com/kriskowal/q), you can use\n  [qlimit](https://github.com/suprememoocow/qlimit).\n- [Async](https://github.com/caolan/async) does not use promises, but offers a\n  [`queue()`](https://github.com/caolan/async#queueworker-concurrency) function.\n\n## Author\n\n[Tim De Pauw](https://tmdpw.eu/)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/timdp/es6-promise-pool.git"
  },
  "scripts": {
    "test": "npm run test:lint && npm run test:node && npm run test:browser",
    "test:browser": "karma start",
    "test:ci": "npm run test:ci:node && npm run test:browser && npm run test:ci:report",
    "test:ci:node": "nyc mocha --reporter mocha-junit-reporter test.js",
    "test:ci:report": "nyc report --reporter text-lcov | coveralls",
    "test:lint": "standard",
    "test:node": "nyc mocha test.js"
  },
  "standard": {
    "ignore": [
      "bower_components/**"
    ],
    "globals": [
      "define",
      "describe",
      "it",
      "before",
      "after",
      "beforeEach",
      "afterEach",
      "chai",
      "chaiAsPromised"
    ]
  },
  "typings": "es6-promise-pool.d.ts",
  "version": "2.5.0"
}
