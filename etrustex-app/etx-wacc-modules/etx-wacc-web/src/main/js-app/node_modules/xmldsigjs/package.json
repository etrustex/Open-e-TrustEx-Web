{
  "_args": [
    [
      {
        "raw": "xmldsigjs@^2.0.20",
        "scope": null,
        "escapedName": "xmldsigjs",
        "name": "xmldsigjs",
        "rawSpec": "^2.0.20",
        "spec": ">=2.0.20 <3.0.0",
        "type": "range"
      },
      "C:\\Pgm\\workspaces\\etx-web\\etrustex-app\\etx-wacc-modules\\etx-wacc-web\\src\\main\\webapp\\node_modules\\xadesjs"
    ]
  ],
  "_from": "xmldsigjs@>=2.0.20 <3.0.0",
  "_id": "xmldsigjs@2.0.20",
  "_inCache": true,
  "_location": "/xmldsigjs",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/xmldsigjs-2.0.20.tgz_1515705023666_0.9663577715400606"
  },
  "_npmUser": {
    "name": "microshine",
    "email": "microshine@mail.ru"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xmldsigjs@^2.0.20",
    "scope": null,
    "escapedName": "xmldsigjs",
    "name": "xmldsigjs",
    "rawSpec": "^2.0.20",
    "spec": ">=2.0.20 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/xadesjs"
  ],
  "_resolved": "http://diplazium.cc.cec.eu.int:8081/repository/npm-all/xmldsigjs/-/xmldsigjs-2.0.20.tgz",
  "_shasum": "3caff00d7f945e3d6998c1738f5512e18650f907",
  "_shrinkwrap": null,
  "_spec": "xmldsigjs@^2.0.20",
  "_where": "C:\\Pgm\\workspaces\\etx-web\\etrustex-app\\etx-wacc-modules\\etx-wacc-web\\src\\main\\webapp\\node_modules\\xadesjs",
  "author": {
    "name": "Peculiar Ventures, Inc."
  },
  "bugs": {
    "url": "https://github.com/PeculiarVentures/xadesjs/issues"
  },
  "dependencies": {
    "asn1js": "^2.0.15",
    "pkijs": "^2.1.13",
    "pvutils": "^1.0.8",
    "tslib": "^1.8.1",
    "xml-core": "^1.0.12"
  },
  "description": "XMLDSIGjs provides an implementation of XMLDSIG in Typescript/Javascript based on WebCrypto ",
  "devDependencies": {
    "@types/asn1js": "latest",
    "@types/node": "^6.0.96",
    "babel-plugin-external-helpers": "^6.18.0",
    "babel-preset-es2015": "^6.18.0",
    "babelrc-rollup": "^3.0.0",
    "coveralls": "^2.13.3",
    "mocha": "^3.5.3",
    "node-webcrypto-ossl": "^1.0.33",
    "nyc": "^8",
    "rollup": "^0.41.4",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-typescript": "^0.8.1",
    "typescript": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-gzXwF5NUhSw4Gr/u6e8p1VBw0DazuLfoz5u0jo740AgsuiqdrDZJdmSQggY7WgpLLeABDUBF4ZZ8pj3txlCv4w==",
    "shasum": "3caff00d7f945e3d6998c1738f5512e18650f907",
    "tarball": "http://diplazium.cc.cec.eu.int:8081/repository/npm-all/xmldsigjs/-/xmldsigjs-2.0.20.tgz"
  },
  "gitHead": "8f105d135f43654ea8202c748544157d8b59eccf",
  "homepage": "https://github.com/PeculiarVentures/xadesjs#readme",
  "jsnext:main": "lib/index.js",
  "keywords": [
    "xml",
    "xmldsig",
    "webcrypto",
    "signature",
    "rsa",
    "ec"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "microshine",
      "email": "microshine@mail.ru"
    },
    {
      "name": "peculiarventures",
      "email": "info@peculiarventures.com"
    }
  ],
  "module": "lib/index.js",
  "name": "xmldsigjs",
  "optionalDependencies": {},
  "readme": "# XMLDSIGjs\n\n[![license](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://raw.githubusercontent.com/PeculiarVentures/xmldsigjs/master/LICENSE) [![CircleCI](https://circleci.com/gh/PeculiarVentures/xmldsigjs.svg?style=svg)](https://circleci.com/gh/PeculiarVentures/xmldsigjs)\n[![Coverage Status](https://coveralls.io/repos/github/PeculiarVentures/xmldsigjs/badge.svg?branch=master)](https://coveralls.io/github/PeculiarVentures/xmldsigjs?branch=master)\n[![NPM version](https://badge.fury.io/js/xmldsigjs.png)](http://badge.fury.io/js/xmldsigjs)\n\n[![NPM](https://nodei.co/npm-dl/xmldsigjs.png?months=2&height=2)](https://nodei.co/npm/xmldsigjs/)\n\n[XMLDSIG](https://en.wikipedia.org/wiki/XML_Signature) is short for \"XML Digital Signature\". This library aims to provide an implementation of XMLDSIG in Typescript/Javascript that uses Web Crypto for cryptographic operations so it can be used both in browsers and in Node.js (when used with a polyfill like [node-webcrypto-ossl](https://github.com/PeculiarVentures/node-webcrypto-ossl) or [node-webcrypto-p11](https://github.com/PeculiarVentures/node-webcrypto-p11)).\n\n## INSTALLING\n\n```\nnpm install xmldsigjs\n```\n\nThe npm module has `dist` folder with the following files:\n\n| Name            | Size   | Description                                    |\n|-----------------|--------|------------------------------------------------|\n| index.js        | 126 Kb | UMD module with external modules. Has comments | \n| xmldsig.js      | 696 Kb | UMD bundle module. Has comments                | \n| xmldsig.min.js  | 253 Kb | minified UMD bundled module. No comments       |\n\nThere is `lib` folder with ES2015 JS file which you can use with the `rollup` bundler.\n \n## COMPATABILITY\n\n### CRYPTOGRAPHIC ALGORITHM SUPPORT \n\n|                   | SHA1 | SHA2-256 | SHA2-384 | SHA2-512 |\n|-------------------|------|----------|----------|----------|\n| RSASSA-PKCS1-v1_5 | X    | X        | X        | X        |\n| RSA-PSS           | X    | X        | X        | X        |\n| ECDSA             | X    | X        | X        | X        |\n| HMAC              | X    | X        | X        | X        |\n\n### CANONICALIZATION ALGORITHM SUPPORT\n\n- XmlDsigC14NTransform\n- XmlDsigC14NWithCommentsTransform\n- XmlDsigExcC14NTransform\n- XmlDsigExcC14NWithCommentsTransform\n- XmlDsigEnvelopedSignatureTransform\n- XmlDsigBase64Transform\n\n\n### PLATFORM SUPPORT\n\nXMLDSIGjs works with any browser that supports Web Crypto. Since node does not have Web Crypto you will need a polyfill on this platform, for this reason the npm package includes [node-webcrypto-ossl](https://github.com/PeculiarVentures/node-webcrypto-ossl); browsers do not need this dependency and in those cases though it will be installed it will be ignored.\n\nIf you need to use a Hardware Security Module we have also created a polyfill for Web Crypto that supports PKCS #11. Our polyfill for this is [node-webcrypto-p11](https://github.com/PeculiarVentures/node-webcrypto-p11).\n\nTo use [node-webcrypto-ossl](https://github.com/PeculiarVentures/node-webcrypto-ossl) you need to specify you want to use it, that looks like this:\n\n```javascript\nvar xmldsigjs = require(\"xmldsigjs\");\nvar WebCrypto = require(\"node-webcrypto-ossl\");\n\nxmldsigjs.Application.setEngine(\"OpenSSL\", new WebCrypto());\n```\n\nThe [node-webcrypto-p11](https://github.com/PeculiarVentures/node-webcrypto-p11) polyfill will work the same way. The only difference is that you have to specify the details about your PKCS#11 device when you instansiate it:\n\n```javascript\nvar xmldsigjs = require(\"xmldsigjs\");\nvar WebCrypto = require(\"node-webcrypto-p11\");\n\nxmldsigjs.Application.setEngine(\"PKCS11\", new WebCrypto({\n    library: \"/path/to/pkcs11.so\",\n\tname: \"Name of PKCS11 lib\",\n\tslot: 0,\n    sessionFlags: 4, // SERIAL_SESSION\n\tpin: \"token pin\"\n}));\n```\n\n## WARNING\n\n**Using XMLDSIG is a bit like running with scissors so use it cautiously. That said it is needed for interoperability with a number of systems, for this reason, we have done this implementation.** \n\n## Usage\n\n### Sign\n\n```typescript\nSignedXml.Sign(algorithm: Algorithm, key: CryptoKey, data: Document, options?: OptionsSign): PromiseLike<Signature>;\n```\n\n__Parameters__\n\n| Name          | Description                                                             |\n|:--------------|:------------------------------------------------------------------------|\n| algorithm     | Signing [Algorithm](https://www.w3.org/TR/WebCryptoAPI/#algorithms)     |\n| key           | Signing [Key](https://www.w3.org/TR/WebCryptoAPI/#cryptokey-interface)  |\n| data          | XML document which must be signed                                       |\n| options       | Additional options                                                      |\n\n\n#### Options\n```typescript\ninterface OptionsSign {\n    /**\n     * Public key for KeyInfo block\n     */\n    keyValue?: CryptoKey;\n    /**\n     * List of X509 Certificates\n     */\n    x509?: string[];\n    /**\n     * List of Reference\n     * Default is Reference with hash alg SHA-256 and exc-c14n transform  \n     */\n    references?: OptionsSignReference[];\n}\n\ninterface OptionsSignReference {\n    /**\n     * Id of Reference\n     */\n    id?: string;\n    uri?: string;\n    /**\n     * Hash algorithm\n     */\n    hash: AlgorithmIdentifier;\n    /**\n     * List of transforms\n     */\n    transforms?: OptionsSignTransform[];\n}\n\ntype OptionsSignTransform = \"enveloped\" | \"c14n\" | \"exc-c14n\" | \"c14n-com\" | \"exc-c14n-com\" | \"base64\";\n```\n\n### Verify\n\n```typescript\nVerify(key?: CryptoKey): PromiseLike<boolean>;\n```\n\n__Parameters__\n\n| Name          | Description                                                             |\n|:--------------|:------------------------------------------------------------------------|\n| key           | Verifying [Key](https://www.w3.org/TR/WebCryptoAPI/#cryptokey-interface). Optional. If key not set it looks for keys in KeyInfo element of Signature.  |\n\n## EXAMPLES\n\nFor Sign/Verify operations you will need to use a Web Crypto CryptoKey. You can see [examples](https://github.com/diafygi/webcrypto-examples#rsassa-pkcs1-v1_5---generatekey) for an example of how to do that.\n\n### Initiating in NodeJs\n\n```javascript\n\"use strict\";\n\nconst WebCrypto = require(\"node-webcrypto-ossl\");\nconst crypto = new WebCrypto();\nconst XmlDSigJs = require(\"xmldsigjs\");\n\nXmlDSigJs.Application.setEngine(\"OpenSSL\", crypto);\n```\n\n### Initiating in Browser\n\n```html\n<script src=\"xmldsig.js\"></script>\n```\n\n### Creating a XMLDSIG Signature\n\n```javascript\n\"use strict\";\n\nlet signature = new XmlDSigJs.SignedXml();\n\nsignature.Sign(                                  // Signing document\n    { name: \"RSASSA-PKCS1-v1_5\" },                        // algorithm \n    keys.privateKey,                                      // key \n    XmlDSigJs.Parse(xml),                                 // document\n    {                                                     // options\n        keyValue: keys.publicKey,\n        references: [\n            { hash: \"SHA-512\", transforms: [\"enveloped\", \"c14n\"] },\n        ]\n    })\n    .then(() => {\n        console.log(signature.toString());       // <xml> document with signature\n    })\n    .catch(e => console.log(e));\n```\n\n### Checking a XMLDSIG Signature \n\n\n```javascript\n\"use strict\";\n\nlet doc = XmlDSigJs.Parse(xml);\nlet signature = doc.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\", \"Signature\");\n\nlet signedXml = new XmlDSigJs.SignedXml(doc);\nsignedXml.LoadXml(signature[0]);\n\nsignedXml.Verify()\n    .then(res => {\n        console.log(\"Signature status:\", res);       // Signature status: true\n    })\n    .catch(e => console.log(e));\n```\n\n#### Browser Verify Example\n```HTML\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>XMLDSIGjs Verify Sample</title>\n</head>\n\n<body>\n    <script src=\"https://peculiarventures.github.io/pv-webcrypto-tests/src/promise.js\"></script>\n    <script src=\"https://peculiarventures.github.io/pv-webcrypto-tests/src/webcrypto-liner.min.js\"></script>\n    <script src=\"https://peculiarventures.github.io/pv-webcrypto-tests/src/asmcrypto.js\"></script>\n    <script src=\"https://peculiarventures.github.io/pv-webcrypto-tests/src/elliptic.js\"></script>\n    <script type=\"text/javascript\" src=\"xmldsig.js\"></script>\n    <script type=\"text/javascript\">\n        fetch(\"signature.xml\")\n        .then(function(response) {\n            return response.text();\n        }).then(function(body) {\n            var xmlString = body;\n\n            var signedDocument = XmlDSigJs.Parse(xmlString);\n            var xmlSignature = signedDocument.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\", \"Signature\");\n\n            var signedXml = new XmlDSigJs.SignedXml(signedDocument);\n            signedXml.LoadXml(xmlSignature[0]);\n            signedXml.Verify()\n            .then(function (res) {\n                console.log((res ? \"Valid\" : \"Invalid\") + \" signature\");\n            })\n            .catch(function (e) {\n                console.error(e);\n            });\n        })\n    </script>\n</body>\n</html>\n```\n\n## TESTING\n\n### In NodeJS:\n\n```\nnpm test\n```\n\n### In the browser\nTo run the browser test you need to run a test server, from the test directory run: \n```\nnpm start\n```\n\nAnd the then browse to `http://localhost:3000'.\n\n## THANKS AND ACKNOWLEDGEMENT\nThis project takes inspiration (style, approach, design and code) from both the [Mono System.Security.Cryptography.Xml](https://github.com/mono/mono/tree/master/mcs/class/System.Security/System.Security.Cryptography.Xml) implementation as well as [xml-crypto](https://github.com/yaronn/xml-crypto).\n\n## RELATED\n- [Why XML Security is Broken](https://www.cs.auckland.ac.nz/~pgut001/pubs/xmlsec.txt)\n- [XML Signature Syntax and Processing](https://www.w3.org/TR/xmldsig-core/)\n- [XML Security Algorithm Cross-Reference](https://tools.ietf.org/html/rfc6931)\n- [XMLDSIG HTML Signing Profile](https://www.w3.org/2007/11/h6n/)\n- [Canonical XML](https://www.w3.org/TR/xml-c14n)\n- [Exclusive XML Canonicalization](https://www.w3.org/TR/xml-exc-c14n/)\n- [Internet X.509 Public Key Infrastructure Time-Stamp Protocol](https://www.ietf.org/rfc/rfc3161.txt)\n- [PKIjs](pkijs.org)\n- [node-webcrypto-ossl](https://github.com/PeculiarVentures/node-webcrypto-ossl)\n- [node-webcrypto-p11](https://github.com/PeculiarVentures/node-webcrypto-p11)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PeculiarVentures/xadesjs.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:es5 && npm run build:web",
    "build:es5": "rollup -c",
    "build:lib": "rollup -c rollup.config.lib.js",
    "build:map": "rollup -c --dev",
    "build:source": "tsc --declaration --declarationDir types",
    "build:web": "rollup -c rollup.config.web.js && babel dist/xmldsig.js --comment=false --out-file dist/xmldsig.js",
    "coverage": "nyc npm test",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "prepub": "npm run build",
    "pretest": "npm run build:map",
    "pub": "npm version patch && npm publish && git push",
    "start": "node test/html/server.js",
    "sync": "git ac && git pull --rebase && git push",
    "test": "mocha test/scripts",
    "test:local": "nyc --reporter=lcov npm test"
  },
  "version": "2.0.20"
}
