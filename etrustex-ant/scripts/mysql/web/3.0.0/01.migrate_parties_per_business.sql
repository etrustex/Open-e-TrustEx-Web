-- Alter Party
ALTER TABLE ETX_WEB_PARTY ADD PAR_WEB_MANAGED TINYINT(1) NULL;
UPDATE ETX_WEB_PARTY SET PAR_WEB_MANAGED = 1;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_WEB_MANAGED TINYINT(1) NOT NULL;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_NODE_USR varchar(255) NULL;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_NODE_PASS varchar(255) NULL;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_NOTIFICATIONS_ENABLED TINYINT(1) NULL;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_CONSUME_NODE_MSG TINYINT(1) NULL;
ALTER TABLE ETX_WEB_PARTY MODIFY PAR_STS_NOTIF_ENABLED TINYINT(1) NULL;
ALTER TABLE ETX_WEB_PARTY DROP UNIQUE (PAR_NODE_NAME);
ALTER TABLE ETX_WEB_PARTY ADD CONSTRAINT UNIQUE_NODE_NAME_BUS_ID UNIQUE(PAR_NODE_NAME, BUS_ID);

-- Alter Party ICA
ALTER TABLE ETX_WEB_PARTY_ICA ADD REMOTE_PAR_ID DECIMAL(19,0);
ALTER TABLE ETX_WEB_PARTY_ICA ADD CONSTRAINT FK_PCA_REMOTE_PAR_ID FOREIGN KEY (REMOTE_PAR_ID) REFERENCES ETX_WEB_PARTY (PAR_ID);

-- Data Migration
DROP PROCEDURE IF EXISTS MIGRATE_REMOTE_PARTIES;

CREATE PROCEDURE MIGRATE_REMOTE_PARTIES()
BEGIN
    DECLARE remote_party_id DECIMAL(19,0);
    DECLARE icas_id DECIMAL(19, 0);
    DECLARE icas_node_name VARCHAR(64);
    DECLARE icas_display_name  VARCHAR(75);
    DECLARE icas_bus_id DECIMAL(19, 0);
    DECLARE icas_active_state TINYINT;

    DECLARE icas_cursor CURSOR FOR
      SELECT pi.PCA_ID id, pi.PCA_NODE_NAME node_name, pi.PCA_DISPLAY_NAME display_name, p.BUS_ID bus_id, pi.PCA_STATE active_state
      FROM ETX_WEB_PARTY_ICA pi JOIN ETX_WEB_PARTY p
      ON pi.PAR_ID = p.PAR_ID
      WHERE pi.PCA_STATE = 1;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET end_of_tables = 1;

    open icas_cursor;
    icas_loop: LOOP
        FETCH icas_cursor INTO icas_id, icas_node_name, icas_display_name, icas_bus_id, icas_active_state;

        IF end_of_tables = 1 THEN
            close icas_cursor;
            LEAVE icas_loop;
        END IF;

        SET remote_party_id = (SELECT PAR_ID FROM ETX_WEB_PARTY WHERE PAR_NODE_NAME = icas_node_name AND BUS_ID = icas_bus_id);
        IF remote_party_id IS NULL THEN
            SET remote_party_id = (SELECT MAX(PAR_ID) + 1 FROM ETX_WEB_PARTY);
            INSERT INTO ETX_WEB_PARTY (PAR_ID, PAR_NODE_NAME, PAR_DISPLAY_NAME, BUS_ID, PAR_CREATED_BY, PAR_ACTIVE_STATE, PAR_WEB_MANAGED)
                      VALUES (remote_party_id, icas_node_name, icas_display_name, icas_bus_id, 0, icas_active_state, 0);
        END IF
        UPDATE ETX_WEB_PARTY_ICA SET REMOTE_PAR_ID = remote_party_id WHERE PCA_ID = icas_id;
    END LOOP icas_loop;
END;

CALL MIGRATE_REMOTE_PARTIES();
DROP PROCEDURE MIGRATE_REMOTE_PARTIES;

-- Alter Party ICA
ALTER TABLE ETX_WEB_PARTY_ICA MODIFY REMOTE_PAR_ID DECIMAL(19,0) NOT NULL;
ALTER TABLE ETX_WEB_PARTY_ICA DROP COLUMN PCA_NODE_NAME;
ALTER TABLE ETX_WEB_PARTY_ICA DROP COLUMN PCA_DISPLAY_NAME;