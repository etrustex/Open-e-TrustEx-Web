DROP TRIGGER IF EXISTS TRG_A_I_USER_ROLE;
DROP TRIGGER IF EXISTS TRG_A_U_USER_ROLE;
DROP PROCEDURE IF EXISTS CHECK_USER_ROLE;

CREATE TRIGGER TRG_A_I_USER_ROLE AFTER INSERT ON ETX_WEB_USER_ROLE
  FOR EACH ROW
    BEGIN
      CALL CHECK_USER_ROLE(NEW.URO_ID, NEW.ROL_TYPE, NEW.PAR_ID, NEW.BUS_ID);
    END;
/

CREATE TRIGGER TRG_A_U_USER_ROLE AFTER UPDATE ON ETX_WEB_USER_ROLE
  FOR EACH ROW
    BEGIN
      CALL CHECK_USER_ROLE(NEW.URO_ID, NEW.ROL_TYPE, NEW.PAR_ID, NEW.BUS_ID);
    END;
/

CREATE PROCEDURE CHECK_USER_ROLE(IN NEW_URO_ID BIGINT(19), IN NEW_ROL_TYPE VARCHAR(50), IN NEW_PAR_ID BIGINT(19), IN NEW_BUS_ID BIGINT(19))
BEGIN
      DECLARE V_ROL_NAME varchar(255);
      DECLARE V_ROL_TYPE varchar(50);
      DECLARE V_ROL_SCOPE varchar(50);
      DECLARE msg varchar(100);
      SET MSG = CONCAT('TRG_A_IU_USER_ROLE error: Trying to insert or update incorrect value for id: ', cast(NEW_URO_ID as char));

      SELECT ROL_NAME, ROL_TYPE, ROL_SCOPE INTO V_ROL_NAME, V_ROL_TYPE, V_ROL_SCOPE FROM ETX_WEB_ROLE WHERE ROL_TYPE = NEW_ROL_TYPE;

      CASE V_ROL_SCOPE
       WHEN 'PARTY_SCOPE' THEN
         IF NEW_PAR_ID IS NULL OR NEW_BUS_ID IS NOT NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
         END IF;
       WHEN 'BUSINESS_SCOPE' THEN
         IF NEW_PAR_ID IS NOT NULL OR NEW_BUS_ID IS NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
         END IF;
       WHEN 'SYSTEM_SCOPE' THEN
         IF NEW_PAR_ID IS NOT NULL OR NEW_BUS_ID IS NOT NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
         END IF;
       ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
      END CASE;
END;
/